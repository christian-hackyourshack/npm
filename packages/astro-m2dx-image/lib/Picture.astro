---
import { getPicture } from '@astrojs/image';
import {
  getAspectRatio,
  getFallbackAspectRatio,
  getFallbackWidths,
  resolveSrc,
  warnForMissingAlt,
} from './internal';
import type { CallbackProps, PictureProps } from './types';

export interface Props extends PictureProps {}

const { callback, ...props } = Astro.props as Props;
props.src = await resolveSrc(props.src);
callback && (await callback(props as CallbackProps));

const {
  alt,
  background,
  decoding = 'async',
  fit,
  formats = ['avif', 'webp'],
  loading = 'lazy',
  position,
  sizes,
  src,
  ...attrs
} = props as CallbackProps;

if (alt === undefined || alt === null) {
  warnForMissingAlt(src.src);
}

const aspectRatio =
  getAspectRatio({ ...props, src }) ?? getFallbackAspectRatio(src.src, alt);

let widths = props.widths;
if (!widths || widths.length === 0) {
  const width = props.width || src.width;
  widths = width //
    ? [width]
    : getFallbackWidths(src.src, alt);
}

const { image, sources } = await getPicture({
  alt,
  aspectRatio,
  background,
  fit,
  formats,
  position,
  // For now, unresolve src, if it could not be resolved
  src: !src.width ? src.src : src,
  widths,
});

// PATCH: We want the image dimensions, but we do not want some other
// transferred attributes. See https://github.com/withastro/astro/pull/4797
// We use the new intrinsic dimensions from image instead of the attributes
delete attrs.aspectRatio;
delete attrs.height;
delete attrs.width;
delete attrs.widths;
// delete image.width;
// delete image.height;
delete (image as any).background;
delete (image as any).fit;
delete (image as any).position;
---

<picture>
  {sources.map((attrs) => <source {...attrs} sizes={sizes} />)}
  <img {...image} loading={loading} decoding={decoding} alt={alt} {...attrs} />
</picture>
